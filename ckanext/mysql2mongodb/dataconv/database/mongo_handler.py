import logging
from typing import Any

from ckanext.mysql2mongodb.dataconv.exceptions import UnspecifiedDatabaseException

from ckanext.mysql2mongodb.dataconv.constant.error_codes import MONGO_UNSPECIFIED_DATABASE_ERROR, \
    MONGO_DATABASE_CONNECTION_ERROR, MONGO_DROP_DATABASE_ERROR
from pymongo import MongoClient

from ckanext.mysql2mongodb.dataconv.database.abstract_database_handler import AbstractDatabaseHandler

from ckanext.mysql2mongodb.dataconv.settings import MONGO_HOST, MONGO_PORT, MONGO_USERNAME, MONGO_PASSWORD

logger = logging.getLogger(__name__)


class MongoHandler(AbstractDatabaseHandler):
    # Override
    def __init__(self):
        super().__init__()
        self._host = MONGO_HOST
        self._port = MONGO_PORT
        self._username = MONGO_USERNAME
        self._password = MONGO_PASSWORD

    # Override
    def set_db(self, db: str):
        self._db = db

    # Override
    def restore_from_ckan(self, resource_id: str, file_name: str):
        pass

    # Override
    def backup(self):
        pass

    def drop_db(self):
        """
        Drop MongoDB database.
        Be useful, just use this function at the begining of conversion.
        """
        if not self._db:
            logger.error(f'error code: {MONGO_UNSPECIFIED_DATABASE_ERROR}')
            raise UnspecifiedDatabaseException('Set database first')
        try:
            # Making connection
            conn = self._get_open_connection()
            conn.drop_database(self._db)
        except Exception as ex:
            logger.error(f'error code: {MONGO_DROP_DATABASE_ERROR}')
            raise ex

    # def import_json(self):
    #     """
    #     Import intermediate JSON file, which was generated and saved at path "./intermediate/<database-name>", into MongoDB.
    #     Parameter:
    #         import_dataset:
    #             - True: If you want to import a dataset (MySQL table / Mongodb collection).
    #             - False: If you want to import a schema file (was usually generated by SchemaCrawler).
    #     """
    #     try:
    #         # Created or switched to collection
    #         Collection = db_connection[collection_name]
    #         # Opening json file
    #         with open(f"./intermediate_data/{dbname}/{json_filename}") as file:
    #             file_data = json.load(file)
    #             table_data = file_data
    #             if import_dataset is True:
    #                 table_data = file_data["data"]
    #             # else:
    #                 # table_data = {
    #                     # "auto_generated_schema": file_data
    #                 # }
    #
    #         # Inserting the json data in the Collection
    #         # If JSON contains data more than one entry
    #         # insert_many is used else inser_one is used
    #         if isinstance(table_data, list):
    #             Collection.insert_many(table_data)
    #             # Collection.insert_many(table_data, ordered=False)
    #         else:
    #             Collection.insert_one(table_data)
    #         return True
    #         print(f"Write data from JSON file {json_filename} to MongoDB collection {collection_name} of database {dbname} successfully!")
    #     except Exception as e:
    #         print(f"Error while writing JSON file {json_filename} to MongoDB collection {collection_name} of database {dbname}")
    #         print(e)
    #         raise e

    def _get_open_connection(self) -> Any:
        uri = 'mongodb://{username}:{password}@{host}:{port}/?authMechanism=SCRAM-SHA-256' \
            .format(username=self._username, password=self._password, host=self._host, port=self._port)
        try:
            # Making connection
            return MongoClient(uri)
        except Exception as ex:
            logger.error(f'error code: {MONGO_DATABASE_CONNECTION_ERROR}')
            raise ex
